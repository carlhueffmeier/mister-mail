service:
  name: mister-mail

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    excludeFiles: ./**/*.spec.ts
    includeModules:
      forceExclude:
        - "aws-sdk"
        - "@types/aws-lambda"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  campaigns-table: ${self:service}-${self:custom.stage}
  campaigns-table-arn: "arn:aws:dynamodb:${self:custom.region}:#{AWS::AccountId}:table/${self:custom.campaigns-table}"
  campaigns-topic: ${self:service}-${self:custom.stage}-campaigns-topic
  campaigns-topic-arn: "arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.campaigns-topic}"
  email-events-topic: ${self:service}-${self:custom.stage}-email-events-topic
  email-events-topic-arn: "arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.email-events-topic}"
  ses-configuration-set: ${self:service}-${self:custom.stage}

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMODB_CAMPAIGN_TABLE: ${self:custom.campaigns-table}
    SNS_CAMPAIGNS_TOPIC_ARN: ${self:custom.campaigns-topic-arn}
    SNS_EMAIL_EVENTS_TOPIC_ARN: ${self:custom.email-events-topic-arn}
    SES_CONFIGURATION_SET: ${self:custom.ses-configuration-set}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - ${self:custom.campaigns-table-arn}
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - ${self:custom.campaigns-topic-arn}
        - ${self:custom.email-events-topic-arn}
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - ses:CreateConfigurationSetEventDestination
        - ses:DeleteConfigurationSetEventDestination
      Resource:
        - "*"

functions:
  CreateCampaign:
    handler: services/campaign-service/create-campaign.handler
    events:
      - http:
          method: post
          path: campaigns/create
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer

  ListCampaigns:
    handler: services/campaign-service/list-campaigns.handler
    events:
      - http:
          method: get
          path: campaigns
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer

  SendCampaignEmails:
    handler: services/email-service/send-campaign-emails.handler
    events:
      - sns: ${self:custom.campaigns-topic}

  HandleEmailEvent:
    handler: services/email-service/handle-email-event.handler
    events:
      - sns:
          arn: !Ref EmailEventsTopic
          topicName: ${self:custom.email-events-topic}

  ConfigureEmailEvents:
    handler: services/email-service/configure-email-events.handler

resources:
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/ses.yml)}
