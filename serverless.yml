service:
  name: mister-mail

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-appsync-plugin

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    excludeFiles: ./**/*.spec.ts
    includeModules:
      forceExclude:
        - "aws-sdk"
        - "@types/aws-lambda"

  appSync:
    name: ${self:custom.app-sync-name}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    schema: schema.graphql
    userPoolConfig:
      awsRegion: ${self:custom.region}
      defaultAction: ALLOW
      userPoolId: !Ref CognitoUserPool
      playgroundClientId: !Ref CognitoUserPoolClient
    additionalAuthenticationProviders:
      - authenticationType: AWS_IAM
    logConfig:
      loggingRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
      level: ALL
    mappingTemplates:
      - field: getCampaigns
        type: Query
        dataSource: CampaignsTableDataSource
        request: "getCampaigns.request.vtl"
        response: "getCampaigns.response.vtl"
      - field: createCampaign
        type: Mutation
        dataSource: CreateCampaignLambdaDataSource
        request: "createCampaign.request.vtl"
        response: "createCampaign.response.vtl"
      - field: campaignUpdate
        type: Subscription
        dataSource: NoneDataSource
        request: "local.request.vtl"
        response: "local.response.vtl"
      - field: notifyCampaignUpdate
        type: Mutation
        dataSource: NoneDataSource
        request: "local.request.vtl"
        response: "local.response.vtl"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: CampaignsTableDataSource
        description: Campaigns Table
        config:
          tableName: ${self:custom.campaigns-table}
          serviceRoleArn: !GetAtt AppSyncDynamoDbServiceRole.Arn
      - type: AWS_LAMBDA
        name: CreateCampaignLambdaDataSource
        description: CreateCampaign Lambda
        config:
          functionName: CreateCampaign
      - type: NONE
        name: NoneDataSource
        description: Local Data Source

  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  app-sync-name: ${self:service}-${self:custom.stage}
  campaigns-table: ${self:service}-${self:custom.stage}
  campaigns-table-arn: "arn:aws:dynamodb:${self:custom.region}:#{AWS::AccountId}:table/${self:custom.campaigns-table}"
  campaigns-topic: ${self:service}-${self:custom.stage}-campaigns-topic
  campaigns-topic-arn: "arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.campaigns-topic}"
  ses-events-topic: ${self:service}-${self:custom.stage}-ses-events-topic
  ses-events-topic-arn: "arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.ses-events-topic}"
  emails-topic: ${self:service}-${self:custom.stage}-emails-topic
  emails-topic-arn: "arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.emails-topic}"
  ses-configuration-set: ${self:service}-${self:custom.stage}

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    # Caution! This depends on the implementation of serverless-appsync-plugin
    APPSYNC_ENDPOINT: !GetAtt GraphQlApi.GraphQLUrl
    DYNAMODB_CAMPAIGN_TABLE: ${self:custom.campaigns-table}
    SNS_CAMPAIGNS_TOPIC_ARN: ${self:custom.campaigns-topic-arn}
    SNS_SES_EVENTS_TOPIC_ARN: ${self:custom.ses-events-topic-arn}
    SNS_EMAILS_TOPIC_ARN: ${self:custom.emails-topic-arn}
    SES_CONFIGURATION_SET: ${self:custom.ses-configuration-set}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - ${self:custom.campaigns-table-arn}
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - ${self:custom.campaigns-topic-arn}
        - ${self:custom.ses-events-topic-arn}
        - ${self:custom.emails-topic-arn}
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - ses:CreateConfigurationSetEventDestination
        - ses:DeleteConfigurationSetEventDestination
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - appsync:GraphQL
      Resource: "*"

functions:
  CreateCampaign:
    handler: services/campaign-service/create-campaign.handler

  UpdateCampaignStats:
    handler: services/campaign-service/update-campaign-stats.handler
    events:
      - sns: ${self:custom.emails-topic}

  SendCampaignEmails:
    handler: services/email-service/send-campaign-emails.handler
    events:
      - sns: ${self:custom.campaigns-topic}

  HandleSesEvent:
    handler: services/email-service/handle-ses-event.handler
    events:
      - sns:
          arn: !Ref SesEventsTopic
          topicName: ${self:custom.ses-events-topic}

  # Only used during Cloudformation execution
  ConfigureSesEvents:
    handler: services/email-service/configure-ses-events.handler

resources:
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/ses.yml)}
  - ${file(resources/app-sync.yml)}
